# -*- coding: utf-8 -*-
"""morphology.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IvA5zzQPasJDBaj2rszXdCV9JMMKnp5t
"""

import pandas as pd
import requests
from random import sample
import spacy
from nltk.stem import PorterStemmer
import re

MODELS = {
    "eng": "en_core_web_sm"
}

def get_sigmorph_sentences(lang: str) -> list[str]:
  """Gets the sentences from the corpus of
  SIGMORPH 2022 of a given language if it exists

  parameters:
  -----------
  lang: str
    The language code

  returns:
  --------
  list[str]
    where each item is a sentence from the corpus
  """
  url = "https://raw.githubusercontent.com/"
  url += f"sigmorphon/2022SegmentationST/main/data/{lang}.sentence.test.tsv"
  result = requests.get(url).text

  return result.split("\n")

def random_sample(num_sentences: int, lang: str) -> pd.DataFrame:
  """Gets a random sample of a given language from the SIGMORPH 2022

  parameters:
  -----------
  num_sentences: int
    The number of sentences where the data will be extracted
  lang: str
    The language code

  returns:
  --------
  pandas.DataFrame
    that contains the sentences
  """
  data = get_sigmorph_sentences(lang)
  sentences = sample(data, num_sentences)
  # words = [word for sentence in sentences for word in sentence.split(" ")]

  return pd.DataFrame({ "sentence": sentences })



def preprocess(sentence: str) -> str:
  """Preprocess the text to remove all characters that are not letters

  parameters:
  -----------
  sentence: str
    a string of text to preprocess

  returns:
  --------
  str
    text with only letter characters
  """
  return re.sub('[^A-Za-z]+', ' ', sentence)



def morphological_analysis(sentence: str, nlp, stemmer) -> pd.DataFrame:
  """Performs the stemming, lemmatization and extract the morphology of
  given sentence

  parameters:
  -----------
  sentence: str
    to perform the morphological analysis

  nlp
    from the language model of spicy

  stemmer
    from nltk

  returns:
  --------
  pd.DataFrame
    with each morphological analysis of each word of the sentence

  """
  doc = nlp(sentence)

  words = []
  lemma = []
  stemming = []
  morph = []
  for token in doc:
    words.append(token.text)
    lemma.append(token.lemma_)
    morph.append(token.morph.to_dict())
    stemming.append(stemmer.stem(token.text))

  data = { "words": words, "lemma": lemma,
          "stemming": stemming, "morph": morph }
  return pd.DataFrame(data)

def show_morph_analysis(lang: str):
  """ Prints the morphological analysis of 10 sentences for
  a given language (only english available)
  """
  data = random_sample(10, lang)
  nlp = spacy.load(MODELS[lang])
  stemmer = PorterStemmer()
  analysis = lambda x: morphological_analysis(x, nlp, stemmer)
  data["preprocess"] = data.apply(lambda x: preprocess(x["sentence"]), axis=1)
  data["analysis"] = data.apply(lambda x: analysis(x["preprocess"]), axis=1)

  for index, row in data.iterrows():
    print(row["sentence"])
    print(row['analysis'], "\n\n")

show_morph_analysis("eng")